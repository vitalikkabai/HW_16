{"version":3,"sources":["Contacts/Contact.js","Contacts/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["Contact","props","className","info","firstName","lastName","phone","gender","contactMock","Contacts","state","contacts","search","genderMale","genderFemale","genderLess","checkInputText","toLocaleLowerCase","includes","checkCheckboxes","undefined","onChange","event","target","name","checked","setState","value","filter","item","deepEqual","this","type","htmlFor","id","defaultChecked","map","index","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dd2ed91c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Contacts.css\";\r\n\r\nconst renderingGenderIcon = (gender) => {\r\n  if (gender === \"male\") {\r\n    return \"fas fa-mars\";\r\n  } else if (gender === \"female\") {\r\n    return \"fas fa-venus\";\r\n  } else {\r\n    return \"fas fa-genderless\";\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nconst Contact = (props) => (\r\n  <div className=\"contactInfo\">\r\n    <span>{props.info.firstName}</span>\r\n    <span>{props.info.lastName}</span>\r\n    <span>{props.info.phone}</span>\r\n    <i className={renderingGenderIcon(props.info.gender)}></i>\r\n  </div>\r\n);\r\n\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\nimport deepEqual from \"deep-equal\";\r\nimport \"./Contacts.css\";\r\nimport Contact from \"./Contact\";\r\n\r\nconst contactMock = [\r\n  {\r\n    firstName: \"Барней\",\r\n    lastName: \"Стинсовський\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\",\r\n  },\r\n  {\r\n    firstName: \"Робін\",\r\n    lastName: \"Щербатська\",\r\n    phone: \"+380931460123\",\r\n    gender: \"female\",\r\n  },\r\n  {\r\n    firstName: \"Анонімний\",\r\n    lastName: \"Анонімус\",\r\n    phone: \"+380666666666\",\r\n  },\r\n  {\r\n    firstName: \"Лілія\",\r\n    lastName: \"Олдровна\",\r\n    phone: \"+380504691254\",\r\n    gender: \"female\",\r\n  },\r\n  {\r\n    firstName: \"Маршен\",\r\n    lastName: \"Еріксонян\",\r\n    phone: \"+380739432123\",\r\n    gender: \"male\",\r\n  },\r\n  {\r\n    firstName: \"Теодор\",\r\n    lastName: \"Мотсбес\",\r\n    phone: \"+380956319521\",\r\n    gender: \"male\",\r\n  },\r\n];\r\n;\r\n\r\nclass Contacts extends Component {\r\n  state = {\r\n    contacts: contactMock,\r\n    search: '',\r\n    genderMale: true,\r\n    genderFemale: true,\r\n    genderLess: true,\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    const contacts = contactMock.filter((item) => (\r\n      (this.checkInputText(item.firstName)\r\n        || this.checkInputText(item.lastName)\r\n        || this.checkInputText(item.phone))\r\n        && this.checkCheckboxes(item.gender)\r\n    ));\r\n\r\n    if (!deepEqual(contacts, this.state.contacts)) {\r\n      this.setState({ contacts })\r\n    }\r\n  }\r\n\r\n  checkInputText = (info) => info.toLocaleLowerCase().includes(this.state.search);\r\n\r\n  checkCheckboxes = (gender) => {if (gender === 'male') {\r\n    return this.state.genderMale;\r\n  } else if (gender === 'female') {\r\n    return this.state.genderFemale;\r\n  } else if (gender === undefined) {\r\n    return this.state.genderLess;\r\n  }\r\n}\r\n\r\n  onChange = (event) => {\r\n    if (event.target.name === \"genderMale\" || event.target.name === \"genderFemale\") { \r\n      const { name, checked } = event.target;\r\n      this.setState({ [name]: checked });\r\n    }else if (event.target.name === \"genderLess\"){\r\n      const { name, checked } = event.target;\r\n      this.setState({ [name]: checked });\r\n    }else {\r\n      const { name, value } = event.target;\r\n      this.setState({ [name]: value });\r\n    }\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"contacts\">\r\n        <h2>Contact</h2>\r\n        <input\r\n          name=\"search\"\r\n          type=\"text\"\r\n          value={this.state.search}\r\n          onChange={this.onChange}\r\n        />\r\n\r\n\r\n        <span className=\"genderSpan\">\r\n          <label htmlFor=\"genderMale\">\r\n            Male\r\n            <input\r\n              id=\"genderMale\"\r\n              type=\"checkbox\"\r\n              name=\"genderMale\"\r\n\r\n              onChange={this.onChange}\r\n              defaultChecked\r\n            />\r\n          </label>\r\n          <label htmlFor=\"genderFemale\">\r\n            Female\r\n            <input\r\n              id=\"genderFemale\"\r\n              type=\"checkbox\"\r\n              name=\"genderFemale\"\r\n\r\n              onChange={this.onChange}\r\n              defaultChecked\r\n            />\r\n          </label>\r\n          <label htmlFor=\"genderLess\">\r\n            Anonym\r\n            <input\r\n              id=\"genderLess\"\r\n              type=\"checkbox\"\r\n              name=\"genderLess\"\r\n\r\n              onChange={this.onChange}\r\n              defaultChecked\r\n            />\r\n          </label>\r\n        </span>\r\n        \r\n        <div className=\"foo\"></div>\r\n          {this.state.contacts.map((item, index) => (\r\n            <div className=\"contact\" key={index}>\r\n              <Contact info={item} />\r\n            </div>\r\n            ))}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contacts;\r\n","import React from 'react';\nimport './App.css';\nimport Contacts from './Contacts/Contacts.js';\n\nfunction App() {\n  return (\n    <Contacts />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}